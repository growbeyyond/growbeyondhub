import React, { useState } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';
import Input from '../../../components/ui/Input';
import ClientContextSelector from '../../../components/ui/ClientContextSelector';

const ReportSettings = ({ selectedComponent, onComponentUpdate }) => {
  const [activeTab, setActiveTab] = useState('general');
  const [selectedClient, setSelectedClient] = useState({
    id: 1,
    name: 'TechCorp Solutions',
    avatar: 'TC',
    industry: 'Technology',
    status: 'active'
  });

  const [reportSettings, setReportSettings] = useState({
    title: 'Monthly Performance Report',
    dateRange: 'last-30-days',
    customStartDate: '',
    customEndDate: '',
    includeComparison: true,
    comparisonPeriod: 'previous-period',
    timezone: 'America/New_York'
  });

  const [brandingSettings, setBrandingSettings] = useState({
    logoUrl: '',
    primaryColor: '#2563EB',
    secondaryColor: '#64748B',
    fontFamily: 'Inter',
    footerText: 'Generated by GrowBeyondHub',
    showWatermark: false
  });

  const [exportSettings, setExportSettings] = useState({
    format: 'pdf',
    orientation: 'portrait',
    pageSize: 'a4',
    includeCharts: true,
    includeRawData: false,
    compression: 'medium'
  });

  const [scheduleSettings, setScheduleSettings] = useState({
    enabled: false,
    frequency: 'monthly',
    dayOfMonth: 1,
    dayOfWeek: 'monday',
    time: '09:00',
    recipients: ['client@techcorp.com'],
    subject: 'Your Monthly Performance Report',
    message: 'Please find your monthly performance report attached.'
  });

  const dateRangeOptions = [
    { value: 'last-7-days', label: 'Last 7 days' },
    { value: 'last-30-days', label: 'Last 30 days' },
    { value: 'last-90-days', label: 'Last 90 days' },
    { value: 'this-month', label: 'This month' },
    { value: 'last-month', label: 'Last month' },
    { value: 'this-quarter', label: 'This quarter' },
    { value: 'custom', label: 'Custom range' }
  ];

  const exportFormats = [
    { value: 'pdf', label: 'PDF Document', icon: 'FileText' },
    { value: 'excel', label: 'Excel Spreadsheet', icon: 'FileSpreadsheet' },
    { value: 'powerpoint', label: 'PowerPoint Presentation', icon: 'Presentation' },
    { value: 'html', label: 'HTML Report', icon: 'Globe' }
  ];

  const handleSettingChange = (category, key, value) => {
    switch (category) {
      case 'report':
        setReportSettings(prev => ({ ...prev, [key]: value }));
        break;
      case 'branding':
        setBrandingSettings(prev => ({ ...prev, [key]: value }));
        break;
      case 'export':
        setExportSettings(prev => ({ ...prev, [key]: value }));
        break;
      case 'schedule':
        setScheduleSettings(prev => ({ ...prev, [key]: value }));
        break;
    }
  };

  const handleComponentSettingChange = (key, value) => {
    if (selectedComponent && onComponentUpdate) {
      onComponentUpdate(selectedComponent.id, { [key]: value });
    }
  };

  const tabs = [
    { id: 'general', label: 'General', icon: 'Settings' },
    { id: 'branding', label: 'Branding', icon: 'Palette' },
    { id: 'export', label: 'Export', icon: 'Download' },
    { id: 'schedule', label: 'Schedule', icon: 'Clock' }
  ];

  const renderGeneralSettings = () => (
    <div className="space-y-6">
      {/* Client Selection */}
      <div>
        <label className="block text-sm font-medium text-text-primary mb-2">
          Client
        </label>
        <ClientContextSelector
          selectedClient={selectedClient}
          onClientChange={setSelectedClient}
        />
      </div>

      {/* Report Title */}
      <div>
        <label className="block text-sm font-medium text-text-primary mb-2">
          Report Title
        </label>
        <Input
          type="text"
          value={reportSettings.title}
          onChange={(e) => handleSettingChange('report', 'title', e.target.value)}
          placeholder="Enter report title"
        />
      </div>

      {/* Date Range */}
      <div>
        <label className="block text-sm font-medium text-text-primary mb-2">
          Date Range
        </label>
        <select
          value={reportSettings.dateRange}
          onChange={(e) => handleSettingChange('report', 'dateRange', e.target.value)}
          className="w-full px-3 py-2 bg-background border border-border rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
        >
          {dateRangeOptions.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* Custom Date Range */}
      {reportSettings.dateRange === 'custom' && (
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Start Date
            </label>
            <Input
              type="date"
              value={reportSettings.customStartDate}
              onChange={(e) => handleSettingChange('report', 'customStartDate', e.target.value)}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              End Date
            </label>
            <Input
              type="date"
              value={reportSettings.customEndDate}
              onChange={(e) => handleSettingChange('report', 'customEndDate', e.target.value)}
            />
          </div>
        </div>
      )}

      {/* Comparison Settings */}
      <div>
        <div className="flex items-center space-x-2 mb-3">
          <Input
            type="checkbox"
            checked={reportSettings.includeComparison}
            onChange={(e) => handleSettingChange('report', 'includeComparison', e.target.checked)}
          />
          <label className="text-sm font-medium text-text-primary">
            Include comparison data
          </label>
        </div>
        {reportSettings.includeComparison && (
          <select
            value={reportSettings.comparisonPeriod}
            onChange={(e) => handleSettingChange('report', 'comparisonPeriod', e.target.value)}
            className="w-full px-3 py-2 bg-background border border-border rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
          >
            <option value="previous-period">Previous period</option>
            <option value="same-period-last-year">Same period last year</option>
            <option value="custom-comparison">Custom comparison</option>
          </select>
        )}
      </div>
    </div>
  );

  const renderBrandingSettings = () => (
    <div className="space-y-6">
      {/* Logo Upload */}
      <div>
        <label className="block text-sm font-medium text-text-primary mb-2">
          Agency Logo
        </label>
        <div className="border-2 border-dashed border-border rounded-lg p-6 text-center">
          {brandingSettings.logoUrl ? (
            <div className="space-y-3">
              <img
                src={brandingSettings.logoUrl}
                alt="Agency Logo"
                className="max-h-16 mx-auto"
              />
              <Button
                variant="ghost"
                size="sm"
                onClick={() => handleSettingChange('branding', 'logoUrl', '')}
              >
                Remove Logo
              </Button>
            </div>
          ) : (
            <div className="space-y-3">
              <Icon name="Upload" size={32} className="text-text-muted mx-auto" />
              <div>
                <Button variant="outline" size="sm">
                  Upload Logo
                </Button>
                <p className="text-xs text-text-muted mt-2">
                  PNG, JPG up to 2MB. Recommended: 200x60px
                </p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Color Scheme */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-text-primary mb-2">
            Primary Color
          </label>
          <div className="flex items-center space-x-2">
            <input
              type="color"
              value={brandingSettings.primaryColor}
              onChange={(e) => handleSettingChange('branding', 'primaryColor', e.target.value)}
              className="w-10 h-10 border border-border rounded-md cursor-pointer"
            />
            <Input
              type="text"
              value={brandingSettings.primaryColor}
              onChange={(e) => handleSettingChange('branding', 'primaryColor', e.target.value)}
              className="flex-1"
            />
          </div>
        </div>
        <div>
          <label className="block text-sm font-medium text-text-primary mb-2">
            Secondary Color
          </label>
          <div className="flex items-center space-x-2">
            <input
              type="color"
              value={brandingSettings.secondaryColor}
              onChange={(e) => handleSettingChange('branding', 'secondaryColor', e.target.value)}
              className="w-10 h-10 border border-border rounded-md cursor-pointer"
            />
            <Input
              type="text"
              value={brandingSettings.secondaryColor}
              onChange={(e) => handleSettingChange('branding', 'secondaryColor', e.target.value)}
              className="flex-1"
            />
          </div>
        </div>
      </div>

      {/* Font Family */}
      <div>
        <label className="block text-sm font-medium text-text-primary mb-2">
          Font Family
        </label>
        <select
          value={brandingSettings.fontFamily}
          onChange={(e) => handleSettingChange('branding', 'fontFamily', e.target.value)}
          className="w-full px-3 py-2 bg-background border border-border rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
        >
          <option value="Inter">Inter</option>
          <option value="Roboto">Roboto</option>
          <option value="Open Sans">Open Sans</option>
          <option value="Lato">Lato</option>
          <option value="Montserrat">Montserrat</option>
        </select>
      </div>

      {/* Footer Text */}
      <div>
        <label className="block text-sm font-medium text-text-primary mb-2">
          Footer Text
        </label>
        <Input
          type="text"
          value={brandingSettings.footerText}
          onChange={(e) => handleSettingChange('branding', 'footerText', e.target.value)}
          placeholder="Enter footer text"
        />
      </div>

      {/* Watermark */}
      <div className="flex items-center space-x-2">
        <Input
          type="checkbox"
          checked={brandingSettings.showWatermark}
          onChange={(e) => handleSettingChange('branding', 'showWatermark', e.target.checked)}
        />
        <label className="text-sm font-medium text-text-primary">
          Show GrowBeyondHub watermark
        </label>
      </div>
    </div>
  );

  const renderExportSettings = () => (
    <div className="space-y-6">
      {/* Export Format */}
      <div>
        <label className="block text-sm font-medium text-text-primary mb-3">
          Export Format
        </label>
        <div className="grid grid-cols-2 gap-3">
          {exportFormats.map(format => (
            <button
              key={format.value}
              onClick={() => handleSettingChange('export', 'format', format.value)}
              className={`p-3 border rounded-md text-left transition-smooth ${
                exportSettings.format === format.value
                  ? 'border-primary bg-primary-50 text-primary' :'border-border hover:border-primary hover:bg-surface'
              }`}
            >
              <div className="flex items-center space-x-2">
                <Icon name={format.icon} size={16} />
                <span className="text-sm font-medium">{format.label}</span>
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* PDF Settings */}
      {exportSettings.format === 'pdf' && (
        <>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-text-primary mb-2">
                Orientation
              </label>
              <select
                value={exportSettings.orientation}
                onChange={(e) => handleSettingChange('export', 'orientation', e.target.value)}
                className="w-full px-3 py-2 bg-background border border-border rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              >
                <option value="portrait">Portrait</option>
                <option value="landscape">Landscape</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-text-primary mb-2">
                Page Size
              </label>
              <select
                value={exportSettings.pageSize}
                onChange={(e) => handleSettingChange('export', 'pageSize', e.target.value)}
                className="w-full px-3 py-2 bg-background border border-border rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              >
                <option value="a4">A4</option>
                <option value="letter">Letter</option>
                <option value="legal">Legal</option>
              </select>
            </div>
          </div>
        </>
      )}

      {/* Export Options */}
      <div className="space-y-3">
        <div className="flex items-center space-x-2">
          <Input
            type="checkbox"
            checked={exportSettings.includeCharts}
            onChange={(e) => handleSettingChange('export', 'includeCharts', e.target.checked)}
          />
          <label className="text-sm font-medium text-text-primary">
            Include charts and visualizations
          </label>
        </div>
        <div className="flex items-center space-x-2">
          <Input
            type="checkbox"
            checked={exportSettings.includeRawData}
            onChange={(e) => handleSettingChange('export', 'includeRawData', e.target.checked)}
          />
          <label className="text-sm font-medium text-text-primary">
            Include raw data tables
          </label>
        </div>
      </div>

      {/* Export Actions */}
      <div className="pt-4 border-t border-border">
        <div className="space-y-3">
          <Button variant="primary" fullWidth iconName="Download" iconSize={16}>
            Generate & Download Report
          </Button>
          <Button variant="outline" fullWidth iconName="Eye" iconSize={16}>
            Preview Report
          </Button>
        </div>
      </div>
    </div>
  );

  const renderScheduleSettings = () => (
    <div className="space-y-6">
      {/* Enable Scheduling */}
      <div className="flex items-center space-x-2">
        <Input
          type="checkbox"
          checked={scheduleSettings.enabled}
          onChange={(e) => handleSettingChange('schedule', 'enabled', e.target.checked)}
        />
        <label className="text-sm font-medium text-text-primary">
          Enable automatic report delivery
        </label>
      </div>

      {scheduleSettings.enabled && (
        <>
          {/* Frequency */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Frequency
            </label>
            <select
              value={scheduleSettings.frequency}
              onChange={(e) => handleSettingChange('schedule', 'frequency', e.target.value)}
              className="w-full px-3 py-2 bg-background border border-border rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="daily">Daily</option>
              <option value="weekly">Weekly</option>
              <option value="monthly">Monthly</option>
              <option value="quarterly">Quarterly</option>
            </select>
          </div>

          {/* Schedule Details */}
          {scheduleSettings.frequency === 'monthly' && (
            <div>
              <label className="block text-sm font-medium text-text-primary mb-2">
                Day of Month
              </label>
              <Input
                type="number"
                min="1"
                max="31"
                value={scheduleSettings.dayOfMonth}
                onChange={(e) => handleSettingChange('schedule', 'dayOfMonth', parseInt(e.target.value))}
              />
            </div>
          )}

          {scheduleSettings.frequency === 'weekly' && (
            <div>
              <label className="block text-sm font-medium text-text-primary mb-2">
                Day of Week
              </label>
              <select
                value={scheduleSettings.dayOfWeek}
                onChange={(e) => handleSettingChange('schedule', 'dayOfWeek', e.target.value)}
                className="w-full px-3 py-2 bg-background border border-border rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              >
                <option value="monday">Monday</option>
                <option value="tuesday">Tuesday</option>
                <option value="wednesday">Wednesday</option>
                <option value="thursday">Thursday</option>
                <option value="friday">Friday</option>
                <option value="saturday">Saturday</option>
                <option value="sunday">Sunday</option>
              </select>
            </div>
          )}

          {/* Time */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Delivery Time
            </label>
            <Input
              type="time"
              value={scheduleSettings.time}
              onChange={(e) => handleSettingChange('schedule', 'time', e.target.value)}
            />
          </div>

          {/* Recipients */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Email Recipients
            </label>
            <div className="space-y-2">
              {scheduleSettings.recipients.map((email, index) => (
                <div key={index} className="flex items-center space-x-2">
                  <Input
                    type="email"
                    value={email}
                    onChange={(e) => {
                      const newRecipients = [...scheduleSettings.recipients];
                      newRecipients[index] = e.target.value;
                      handleSettingChange('schedule', 'recipients', newRecipients);
                    }}
                    className="flex-1"
                  />
                  <Button
                    variant="ghost"
                    size="sm"
                    iconName="X"
                    iconSize={16}
                    onClick={() => {
                      const newRecipients = scheduleSettings.recipients.filter((_, i) => i !== index);
                      handleSettingChange('schedule', 'recipients', newRecipients);
                    }}
                  />
                </div>
              ))}
              <Button
                variant="ghost"
                size="sm"
                iconName="Plus"
                iconSize={16}
                onClick={() => {
                  handleSettingChange('schedule', 'recipients', [...scheduleSettings.recipients, '']);
                }}
              >
                Add Recipient
              </Button>
            </div>
          </div>

          {/* Email Subject */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Email Subject
            </label>
            <Input
              type="text"
              value={scheduleSettings.subject}
              onChange={(e) => handleSettingChange('schedule', 'subject', e.target.value)}
              placeholder="Enter email subject"
            />
          </div>

          {/* Email Message */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Email Message
            </label>
            <textarea
              value={scheduleSettings.message}
              onChange={(e) => handleSettingChange('schedule', 'message', e.target.value)}
              placeholder="Enter email message"
              rows={4}
              className="w-full px-3 py-2 bg-background border border-border rounded-md text-sm placeholder-text-muted focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent resize-none"
            />
          </div>
        </>
      )}
    </div>
  );

  const renderComponentSettings = () => {
    if (!selectedComponent) {
      return (
        <div className="text-center py-8">
          <Icon name="MousePointer2" size={32} className="text-text-muted mx-auto mb-3" />
          <p className="text-sm text-text-muted">
            Select a component to configure its settings
          </p>
        </div>
      );
    }

    return (
      <div className="space-y-6">
        <div className="pb-4 border-b border-border">
          <h3 className="font-medium text-text-primary">
            {selectedComponent.type.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())} Settings
          </h3>
          <p className="text-sm text-text-muted mt-1">
            Configure the selected component
          </p>
        </div>

        {selectedComponent.type === 'text-block' && (
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Content
            </label>
            <textarea
              value={selectedComponent.content || ''}
              onChange={(e) => handleComponentSettingChange('content', e.target.value)}
              placeholder="Enter text content"
              rows={4}
              className="w-full px-3 py-2 bg-background border border-border rounded-md text-sm placeholder-text-muted focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent resize-none"
            />
          </div>
        )}

        {selectedComponent.type === 'kpi-card' && (
          <>
            <div>
              <label className="block text-sm font-medium text-text-primary mb-2">
                Metric Value
              </label>
              <Input
                type="text"
                value={selectedComponent.data?.value || ''}
                onChange={(e) => handleComponentSettingChange('data', {
                  ...selectedComponent.data,
                  value: e.target.value
                })}
                placeholder="Enter metric value"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-text-primary mb-2">
                Metric Label
              </label>
              <Input
                type="text"
                value={selectedComponent.data?.label || ''}
                onChange={(e) => handleComponentSettingChange('data', {
                  ...selectedComponent.data,
                  label: e.target.value
                })}
                placeholder="Enter metric label"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-text-primary mb-2">
                Change Percentage
              </label>
              <Input
                type="text"
                value={selectedComponent.data?.change || ''}
                onChange={(e) => handleComponentSettingChange('data', {
                  ...selectedComponent.data,
                  change: e.target.value
                })}
                placeholder="e.g., +12.5%"
              />
            </div>
          </>
        )}
      </div>
    );
  };

  return (
    <div className="h-full bg-background border-l border-border flex flex-col">
      {/* Header */}
      <div className="p-4 border-b border-border">
        <h2 className="text-lg font-heading font-semibold text-text-primary">
          Report Settings
        </h2>
      </div>

      {/* Tabs */}
      <div className="border-b border-border">
        <div className="flex overflow-x-auto">
          {tabs.map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium border-b-2 transition-smooth whitespace-nowrap ${
                activeTab === tab.id
                  ? 'border-primary text-primary' :'border-transparent text-text-muted hover:text-text-primary'
              }`}
            >
              <Icon name={tab.icon} size={16} />
              <span>{tab.label}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-y-auto p-4">
        {activeTab === 'general' && renderGeneralSettings()}
        {activeTab === 'branding' && renderBrandingSettings()}
        {activeTab === 'export' && renderExportSettings()}
        {activeTab === 'schedule' && renderScheduleSettings()}
      </div>

      {/* Component Settings Panel */}
      {selectedComponent && (
        <div className="border-t border-border bg-surface">
          <div className="p-4">
            {renderComponentSettings()}
          </div>
        </div>
      )}
    </div>
  );
};

export default ReportSettings;